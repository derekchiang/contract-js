// Generated by CoffeeScript 1.6.3
(function() {
  var Contract, ContractJs, assert, validators;

  assert = require('should');

  ContractJs = require('../');

  Contract = ContractJs.Contract;

  validators = ContractJs.validators;

  /*
  The following test suite assumes that we are trying to build a
  RPC service that accepts a request of the form:
    
    name: a string
    age: an integer
    height: a float
    
  and returns one of the two:
  
    error: a string
  
    response: a string 'ok'
    ageNextYear: an integer
    heightNextYear: a float
  */


  describe('validators', function() {
    describe('#isString', function() {
      it('should accept a string and return true', function() {
        validators.isString("I'm a string").should.be["true"];
        validators.isString('').should.be["true"];
        validators.isString(new String()).should.be["true"];
        return validators.isString(new String("I'm a string")).should.be["true"];
      });
      return it('should accept a non-string and return false', function() {
        validators.isString(1).should.be["false"];
        validators.isString([1, 2, 3]).should.be["false"];
        return validators.isString({
          a: 1,
          b: 2
        }).should.be["false"];
      });
    });
    describe('#isInteger', function() {
      it('should accept an integer and return true', function() {
        validators.isInteger(1).should.be["true"];
        return validators.isInteger(-2).should.be["true"];
      });
      return it('should accept a non-integer and return false', function() {
        validators.isInteger('Haha').should.be["false"];
        return validators.isInteger(2.13).should.be["false"];
      });
    });
    describe('#isFloat', function() {
      it('should accept a float and return true', function() {
        validators.isFloat(2.0913).should.be["true"];
        return validators.isFloat(-2.0913).should.be["true"];
      });
      return it('should accept a non-float and return false', function() {
        validators.isFloat('Haha').should.be["false"];
        return validators.isFloat(1993).should.be["false"];
      });
    });
    describe('#isObject', function() {
      it('should accept a float and return true', function() {
        validators.isObject(new Object()).should.be["true"];
        return validators.isObject({
          a: 1,
          b: 2
        }).should.be["true"];
      });
      return it('should accept a non-float and return false', function() {
        validators.isObject('Haha').should.be["false"];
        validators.isObject(1993).should.be["false"];
        return validators.isObject(function() {}).should.be["false"];
      });
    });
    return describe('#isFunction', function() {
      it('should accept a float and return true', function() {
        return validators.isFunction(function() {}).should.be["true"];
      });
      return it('should accept a non-float and return false', function() {
        validators.isFunction('Haha').should.be["false"];
        return validators.isFunction(1993).should.be["false"];
      });
    });
  });

}).call(this);
